#!/usr/bin/python

import getopt, os, os.path, shutil, sys
import commands, random, tempfile, traceback

class TestFailure(Exception):
    pass

def writefile(file, content, perm=None, mode='w'):
    """
    Creates a file with the given name, content, and mode.
    The file ay be passed in by name, as an open file object, 
    or as  file descriptor. d in by name, an open file object, or as
    file descriptor. If passed as a file object or file descriptor,
    it will be closed after the content will be written to it.
    """
    fout = open(file, mode)
    try:
        fout.write(content)
    finally:
        fout.close()

    if perm != None and isinstance(file, types.StringTypes): 
        os.chmod(file, perm)

def augmentfile(file):
    content = ""
    for i in range(random.randint(5, 20)):
        content = '%sSome random nr: %s\n' % (content, random.random())
    writefile(file, content, mode='a')

def localTest(tmproot):
    params = {'tmproot': tmproot}
    os.mkdir(os.path.join(tmproot, 'client'))
    os.mkdir(os.path.join(tmproot, 'client', 'data'))
    os.mkdir(os.path.join(tmproot, 'client', 'home'))
    os.mkdir(os.path.join(tmproot, 'client', 'misc'))
    for i in range(5):
        FILES = (
            'data/fileA.out', 
            'data/fileB.nobackup', 
            'data/fileC.out', 
            'home/unit.out', 
            'home/office.out', 
            'home/street.out', 
            'misc/file.nobackup', 
        )
        for file in FILES:
            augmentfile(os.path.join(tmproot, 'client', file))
        os.mkdir(os.path.join(tmproot, 'server'))
        CONFIG = """
        <backup id="labackup test for %(tmproot)s">
          <repo path="%(tmproot)s/server" />
          <data>
             <exclude glob="*.nobackup" />
             <include path="%(tmproot)s/client" />
          </data>
        </backup>
        """
        writefile(os.path.join(tmproot, 'test.cfg'), CONFIG % params)
        cmd = "cd %(tmproot)s/client; find -type f -a \! -name '*.nobackup' | sort | xargs md5sum > ../md5sums.client"
        if os.system(cmd % params):
            raise TestFailure("Can't compute the source MD5 sums")
        cmd = "LaBackup --cfg '%(tmproot)s/test.cfg'"
        if os.system(cmd % params):
            raise TestFailure("Can't backup files")
        os.mkdir(os.path.join(tmproot, 'restore'))
        cmd = "rdiff-backup -r now %(tmproot)s/server %(tmproot)s/restore"
        if os.system(cmd % params):
            raise TestFailure("Can't restore files")
        cmd = "cd %(tmproot)s/restore; find -type f -a \! -name '*.nobackup' | sort | xargs md5sum > ../md5sums.restore"
        if os.system(cmd % params):
            raise TestFailure("Can't compute the source MD5 sums")
        cmd = "diff -u %(tmproot)s/md5sums.client %(tmproot)s/md5sums.restore"
        if os.system(cmd % params):
            raise TestFailure("The MD5 sums differ")
        shutil.rmtree(os.path.join(tmproot, 'restore'))    

def usage():
    print 'usage: %s [options]' % (sys.argv[0])
    print
    print 'options:'
    print '-l,--local     Run the local version of the test (default)'
    print '-r,--remote    Run the client/server version of the test'
    print '-n,--nocleanup Do not erase the temporary root for the test'
    print '-h,--help      Print this help message and exit'

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'lrn', ['local', 'remote', 'nocleanup'])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    nocleanup = False
    mode = 'local'
    for o, a in opts:
        if o in ('-l', '--local'):
            mode = 'local'
        elif o in ('-r', '--remote'):
            mode = 'remote'
        elif o in ('-n', '--nocleanup'):
            nocleanu = True
        elif o in ('-h', '--help'):
            usage()
            sys.exit()

    exitcode = 0
    tmproot = tempfile.mkdtemp()
    try:
        try:
            if mode == 'remote':
                raise Exception('Not implemented yet')
            else:
                localTest(tmproot)
        except TestFailure, tf:
            print tf
            exitcode = 1
    finally:
        if nocleanup:
            print tmproot
        else:
            shutil.rmtree(tmproot)

    sys.exit(exitcode)

if __name__ == '__main__':
    main()

# vim: et ts=8 sw=4 sts=4
