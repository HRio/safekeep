#!/usr/bin/python

import getopt, os, os.path, shutil, sys
import commands, random, time, tempfile, traceback
from commands import mkarg

ssh_id_file = os.path.join(os.environ['HOME'], '.ssh/id_dsa')

class TestFailure(Exception):
    pass

def rcmd(cmd, user, host, error):
    ssh = 'ssh -i %s %s@%s %s' % (mkarg(ssh_id_file), user, host, cmd)
    if os.system(ssh):
        raise TestFailure('Failed to %s on host %s', error, host)

def writefile(file, content, perm=None, mode='w', user=None, host=None):
    """
    Creates a file with the given name, content, and mode.
    The file may be passed in by name, as an open file object, 
    or as  file descriptor. If passed as a file object or file descriptor,
    it will be closed after the content will be written to it.
    """
    if host:
        if mode.startswith('a'):
            redir = '>>'
        else:
            redir = '>'
        ssh = 'ssh -i %s %s@%s cat %s %s' % (mkarg(ssh_id_file), user, host, redir, mkarg(file))
        pipe = os.popen(ssh, 'w')
        pipe.write(content)
        if pipe.close():
            raise TestFailure('Failed to create %s@%s:%s' % (user, host, file))
        if perm != None:
            cmd = 'chmod %s %s' % (perm, file)
            rcmd(cmd, user, host, 'set file permissions for ' + file)
    else:
        fout = open(file, mode)
        try:
            fout.write(content)
        finally:
            fout.close()

        if perm != None and isinstance(file, types.StringTypes): 
            os.chmod(file, perm)

def augmentfile(file, user=None, host=None):
    content = ""
    for i in range(random.randint(5, 20)):
        content = '%sSome random nr: %s\n' % (content, random.random())
    writefile(file, content, mode='a', user=user, host=host)

def localTest(tmproot):
    params = {'tmproot': tmproot}
    os.mkdir(os.path.join(tmproot, 'client'))
    os.mkdir(os.path.join(tmproot, 'client', 'data'))
    os.mkdir(os.path.join(tmproot, 'client', 'home'))
    os.mkdir(os.path.join(tmproot, 'client', 'misc'))
    os.mkdir(os.path.join(tmproot, 'server'))
    CONFIG = """
       <backup id="labackup test for %(tmproot)s">
          <repo path="%(tmproot)s/server" />
          <data>
             <exclude glob="*.nobackup" />
             <include path="%(tmproot)s/client" />
          </data>
        </backup>
    """
    writefile(os.path.join(tmproot, 'test.cfg'), CONFIG % params)
    for i in range(2):
        FILES = (
            'data/fileA.out', 
            'data/fileB.nobackup', 
            'data/fileC.out', 
            'home/unit.out', 
            'home/office.out', 
            'home/street.out', 
            'misc/file.nobackup', 
        )
        for file in FILES:
            augmentfile(os.path.join(tmproot, 'client', file))
        cmd = "cd %(tmproot)s/client; find -type f -a \! -name '*.nobackup' | sort | xargs md5sum > %(tmproot)s/md5sums.client"
        if os.system(cmd % params):
            raise TestFailure("Can't compute the source MD5 sums")
        cmd = "LaBackup --cfg '%(tmproot)s/test.cfg'"
        if os.system(cmd % params):
            raise TestFailure("Can't backup files")
        os.mkdir(os.path.join(tmproot, 'restore'))
        cmd = "rdiff-backup -r now %(tmproot)s/server %(tmproot)s/restore"
        if os.system(cmd % params):
            raise TestFailure("Can't restore files")
        cmd = "cd %(tmproot)s/restore%(tmproot)s/client; find -type f -a \! -name '*.nobackup' | sort | xargs md5sum > %(tmproot)s/md5sums.restore"
        if os.system(cmd % params):
            raise TestFailure("Can't compute the source MD5 sums")
        cmd = "diff -u %(tmproot)s/md5sums.client %(tmproot)s/md5sums.restore"
        if os.system(cmd % params):
            raise TestFailure("The MD5 sums differ")
        shutil.rmtree(os.path.join(tmproot, 'restore'))
        time.sleep(1) 

def takeOver(host, role):
    cmd = 'ssh -o PasswordAuthentication=no root@%s ls /root/LaBackupTestBox' % (host)
    if not os.system(cmd): return False
    print 'The box %s does not appear to have been initialized' % (host)
    print 'for functioning as %s in a LaBackup remote test.' % (role)
    print 'If you want to use it in such a role, please enter the root'
    print 'password for the box so that the test can take over it.'
    print 'WARNING: the test is potentially dangereous, all data on'
    print '         the box may be lost! Please make SURE this is'
    print '         the box you REALLY intend to use for the test.'
    print 'To cancel the test, type Ctrl-C'
    cmd = 'ssh-copy-id %s root@%s' % (ssh_id_file, host)
    if os.system(cmd):
        raise TestFailure('Can not copy SSH ID %s to box %s.' % (ssh_id_file, host))
    cmd = 'rpm --import http://lattica.com/keys/RPM-GPG-KEY-lattica-devel'
    rcmd(cmd, 'root', host, 'install Lattica Devel Key')
    lattica_repo = """
        [lattica-development]
        name=Lattica - Development Tree  for Fedora Core $releasever $basearch
        baseurl=http://lattica.com/repos/lattica/yum/fedora/$releasever/devel/$basearch
        gpgkey=http://lattica.com/keys/RPM-GPG-KEY-lattica-devel
        enabled=1
        gpgcheck=1
    """
    lattica_repo = '\n'.join([line.strip() for line in lattica_repo.splitlines])
    cmd = 'echo %s > /etc/yum.repos.d/lattica.repo' % (mkarg(lattica_repo))
    rcmd(cmd, 'root', host, 'install Lattica Repo')
    cmd = 'yum install -y LaBackup'
    rcmd(cmd, 'root', host, 'install LaBackup')
    cmd = 'touch /root/LaBackupTestBox'
    rcmd(cmd, 'root', host, 'create marker')
    return True

def remoteTest(id_file, client, server):
    newKeys = False
    if takeOver(client, 'server'):
        cmd = 'useradd backup-op'
        rcmd(cmd, 'root', server, 'create backup-op user')
        cmd = 'cd ~backup-op; umask 077; test -d .ssh || mkdir .ssh; ' + \
              'cp /root/.ssh/authorized_keys .ssh/authorized_keys; ' + \
              'chown -R backup-op.backup-op .ssh'
        rcmd(cmd, 'root', server, 'install key for backup-op user')
        cmd = 'ssh-keygen -q -b 1024 -t dsa -N '' -C server -f id-labackup-test-key1'
        rcmd(cmd, 'backup-op', server, 'create key1 on server')
        cmd = 'ssh-keygen -q -b 1024 -t dsa -N '' -C server -f id-labackup-test-key2'
        rcmd(cmd, 'backup-op', server, 'create key2 on server')
        newKeys = True
        #FIXME create .cfg file
 
    if takeOver(client, 'client'):
        pass # no setup should be required for the client

    if newKeys: 
        pass #FIXME: install the new keys on the client

    while True:
        # augment files on client
        # compute MD5 sums on client
        # scp MD5 sums to server
        # run LaBackup on server
        # compute MD5 sums on server
        # compare MD5 sums, fail if different
        # list available backups
        # compare against retention policy, fail if different
        # check no snaps on client
        # check --rbind mounts on client
        # check iff appropriate DB dumps deleted
        time.sleep(1) 

def usage():
    print 'usage: %s [options]' % (sys.argv[0])
    print
    print 'options:'
    print '-l,--local     Run the local version of the test (default)'
    print '-r,--remote    Run the client/server version of the test'
    print '-n,--nocleanup Do not erase the temporary root for the test'
    print '-h,--help      Print this help message and exit'

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'lrn', ['local', 'remote', 'nocleanup'])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    nocleanup = False
    mode = 'local'
    for o, a in opts:
        if o in ('-l', '--local'):
            mode = 'local'
        elif o in ('-r', '--remote'):
            mode = 'remote'
        elif o in ('-n', '--nocleanup'):
            nocleanu = True
        elif o in ('-h', '--help'):
            usage()
            sys.exit()

    exitcode = 0
    tmproot = tempfile.mkdtemp()
    try:
        try:
            if mode == 'remote':
                remoteTest(client, server)
            else:
                localTest(tmproot)
        except TestFailure, tf:
            print tf
            exitcode = 1
    finally:
        if nocleanup:
            print tmproot
        else:
            shutil.rmtree(tmproot)

    sys.exit(exitcode)

if __name__ == '__main__':
    main()

# vim: et ts=8 sw=4 sts=4
