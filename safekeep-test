#!/usr/bin/python

import getopt, os, os.path, shutil, sys
import commands, random, time, tempfile, traceback
from commands import mkarg

ssh_id_file_keys = None

class TestFailure(Exception):
    pass

def mkssh(cmd='ssh'):
    args = [cmd]
    ssh_id_file = ssh_id_file_keys[0]
    if ssh_id_file:
        args.append('-i')
        args.append(mkarg(ssh_id_file))
    return ' '.join(args)

def rpipe(cmd, user, host, desc, cmd2, user2, host2):
    ssh = '%s %s@%s %s' % (mkssh(), user, host, mkarg(cmd))
    print ssh
    ssh2 = '%s %s@%s %s' % (mkssh(), user2, host2, mkarg(cmd2))
    print ssh2
    pout = os.popen(ssh, 'r')
    pin = os.popen(ssh2, 'w')
    for line in pout:
        pin.write(line)
    st1 = pout.close()
    st2 = pin.close()
    if desc and st1:
        raise TestFailure('Failed to %s on host %s', (desc, host))
    if desc and st2:
        raise TestFailure('Failed to %s on host %s', (desc, host2))
    if st1: return st1
    return st2

def rcmd(cmd, user, host, desc = None):
    ssh = '%s %s@%s %s' % (mkssh(), user, host, mkarg(cmd))
    print ssh
    st = os.system(ssh)
    if desc and st:
        raise TestFailure('Failed to %s on host %s', (desc, host))
    return st


def writefile(file, content, perm=None, mode='w', user=None, host=None):
    """
    Creates a file with the given name, content, and mode.
    The file may be passed in by name, as an open file object, 
    or as  file descriptor. If passed as a file object or file descriptor,
    it will be closed after the content will be written to it.
    """
    if host:
        if mode.startswith('a'):
            redir = '>>'
        else:
            redir = '>'
        ssh = '%s %s@%s "cat %s %s"' % (mkssh(), user, host, redir, mkarg(file))
        pipe = os.popen(ssh, 'w')
        pipe.write(content)
        if pipe.close():
            raise TestFailure('Failed to create %s@%s:%s' % (user, host, file))
        if perm != None:
            cmd = 'chmod %s %s' % (perm, file)
            rcmd(cmd, user, host, 'set file permissions for ' + file)
    else:
        fout = open(file, mode)
        try:
            fout.write(content)
        finally:
            fout.close()

        if perm != None and isinstance(file, types.StringTypes): 
            os.chmod(file, perm)

def augmentfile(file, user=None, host=None):
    content = ""
    for i in range(random.randint(5, 20)):
        content = '%sSome random nr: %s\n' % (content, random.random())
    writefile(file, content, mode='a', user=user, host=host)

def localTest(tmproot):
    params = {'tmproot': tmproot}
    os.mkdir(os.path.join(tmproot, 'client'))
    os.mkdir(os.path.join(tmproot, 'client', 'data'))
    os.mkdir(os.path.join(tmproot, 'client', 'home'))
    os.mkdir(os.path.join(tmproot, 'client', 'misc'))
    os.mkdir(os.path.join(tmproot, 'server'))
    CONFIG = """
       <backup id="%(tmproot)s">
          <repo path="%(tmproot)s/server" />
          <data>
             <exclude glob="**/*.nobackup" />
             <include path="%(tmproot)s/client" />
          </data>
        </backup>
    """
    writefile(os.path.join(tmproot, 'test.cfg'), CONFIG % params)
    for i in range(2):
        FILES = (
            'data/fileA.out', 
            'data/fileB.nobackup', 
            'data/fileC.out', 
            'home/unit.out', 
            'home/office.out', 
            'home/street.out', 
            'misc/file.nobackup', 
        )
        for file in FILES:
            augmentfile(os.path.join(tmproot, 'client', file))
        cmd = "cd %(tmproot)s/client; find -type f -a \! -name '*.nobackup' | sort | xargs md5sum > %(tmproot)s/md5sums.client"
        if os.system(cmd % params):
            raise TestFailure("Can't compute the source MD5 sums")
        cmd = "LaBackup --cfg '%(tmproot)s/test.cfg'"
        if os.system(cmd % params):
            raise TestFailure("Can't backup files")
        os.mkdir(os.path.join(tmproot, 'restore'))
        cmd = "rdiff-backup -r now %(tmproot)s/server %(tmproot)s/restore"
        if os.system(cmd % params):
            raise TestFailure("Can't restore files")
        cmd = "cd %(tmproot)s/restore%(tmproot)s/client; find -type f | sort | xargs md5sum > %(tmproot)s/md5sums.restore"
        if os.system(cmd % params):
            raise TestFailure("Can't compute the source MD5 sums")
        cmd = "diff -u %(tmproot)s/md5sums.client %(tmproot)s/md5sums.restore"
        if os.system(cmd % params):
            raise TestFailure("The MD5 sums differ")
        shutil.rmtree(os.path.join(tmproot, 'restore'))
        time.sleep(1) 

def takeOver(host, role):
    cmd = 'ssh -o PasswordAuthentication=no root@%s true' % (host)
    if os.system(cmd): 
        print 'The box %s does not appear to have been initialized' % (host)
        print 'for functioning as %s in a LaBackup remote test.' % (role)
        print 'If you want to use it in such a role, please enter the root'
        print 'password for the box so that the test can take over it.'
        print 'WARNING: the test is potentially dangereous, all data on'
        print '         the box may be lost! Please make SURE this is'
        print '         the box you REALLY intend to use for the test.'
        print 'To cancel the test, type Ctrl-C'
        #eval "$GET_ID" | ssh $1 "umask 077; test -d .ssh || mkdir .ssh ; cat >> .ssh/authorized_keys" || exit 1
        cmd = '%s root@%s' % (mkssh('ssh-copy-id'), host)
        if os.system(cmd):
            raise TestFailure('Can not copy SSH ID to box %s.' % host)

    cmd = 'rpm --import http://lattica.com/keys/RPM-GPG-KEY-lattica-devel'
    rcmd(cmd, 'root', host, 'install Lattica Devel Key')
    lattica_repo = """
        [lattica-development]
        name=Lattica - Development Tree  for Fedora Core $releasever $basearch
        baseurl=http://lattica.com/repos/lattica/yum/fedora/$releasever/devel/$basearch
        gpgkey=http://lattica.com/keys/RPM-GPG-KEY-lattica-devel
        enabled=1
        gpgcheck=1
    """
    lattica_repo = '\n'.join([line.strip() for line in lattica_repo.splitlines()])
    cmd = 'echo "%s" > /etc/yum.repos.d/lattica.repo' % (mkarg(lattica_repo).strip())
    rcmd(cmd, 'root', host, 'install Lattica Repo')
    cmd = 'yum install -y LaBackup'
    #rcmd(cmd, 'root', host, 'install LaBackup')

def createKey(user, host, keyname):
    key = '/home/%s/.ssh/%s' % (user, keyname)
    cmd = 'test -f "%s" || ssh-keygen -q -b 1024 -t dsa -N '' -C server -f "%s"' % (key, key)
    rcmd(cmd, user, host, 'create %s on server' % keyname)
    return key

def remoteTest(client, server):
    takeOver(server, 'server')
    cmd = 'useradd backup-op || true'
    rcmd(cmd, 'root', server, 'create backup-op user')
    cmd = 'umask 077; test -d .ssh || mkdir .ssh; ' + \
          'cp /root/.ssh/authorized_keys .ssh/authorized_keys; ' + \
          'chown -R backup-op.backup-op .ssh'
    rcmd(cmd, 'root', server, 'install key for backup-op user')
    key1 = createKey('backup-op', server, 'id-labackup-test-key1')
    key2 = createKey('backup-op', server, 'id-labackup-test-key2')

    cfg = """
        <backup id="test-client">
          <host name="%s" user="root" key="%s" key2="%s" />
          <repo path="/home/backup-op/client/data" retention="10m"/>
          <data>
             <exclude glob="**/*.nobackup" />
             <include path="/etc" />
             <include path="/var" />
          </data>
        </backup>
        """ % (client, key1, key2)

    writefile('/etc/labackup/test-client.cfg', cfg, '664', 'root', server)
 
    takeOver(client, 'client')

    cmd = 'umask 077; test -d .ssh || mkdir .ssh'
    rcmd(cmd, 'root', client)

    #FIXME: this keeps adding the keys to the client, needs fixing
    cmd1 = 'LaBackup --keys --clientid=test-client --print'
    cmd2 = 'cat >> /root/.ssh/authorized_keys'
    rpipe(cmd1, 'backup-op', server, 'deploy keys to client', cmd2, 'root', client)

    for i in range(2):
        FILES = (
            '/etc/a-simple-file', 
            '/etc/another-file.nobackup', 
            '/var/log/LaBackup-test1.log', 
            '/var/log/LaBackup-test2.nobackup',
        )
        for file in FILES:
            augmentfile(file, user, host)
        cmd1 = "cd /; (find /etc -type f; find /var -type f) | grep -v '\.nobackup$' | sort | xargs md5sum"
        cmd2 = "cat > /home/backup-op/md5sum.client"
        rpipe(cmd1, 'root', client, 'do MD5 sums on client', cmd2, 'backup-op', server)
        cmd = 'LaBackup'
        rcmd(cmd, 'backup-op', server, 'backup data')
        cmd = 'cd /home/backup-op/client/data; find -type f | sort | xargs md5sum > /home/backup-op/md5sum.server'
        rcmd(cmd, 'backup-op', server, 'do MD5 sums on server')
        cmd = 'diff -q /home/backup-op/md5sum.client /home/backup-op/md5sum.server'
        rcmd(cmd, 'backup-op', server, 'compare MD5 sums')
        
        # list available backups
        # compare against retention policy, fail if different
        # check no snaps on client
        # check --rbind mounts on client
        # check iff appropriate DB dumps deleted
        time.sleep(1) 

def guess_ssh_id_file_keys():
    if os.environ.get('SSH_AUTH_SOCK'):
        out = os.popen('ssh-add -L', 'r')
        ids = out.read()
        if out.close() or not ids:
            print >> sys.stderr, 'Failed to get keys from ssh agent'
        else:
            return (None, ids)
    for filename in ('identity', 'id_dsa', 'id_rsa'):
        file = os.path.join(os.environ['HOME'], '.ssh', filename)
        if os.path.isfile(file): 
            fin = open(file)
            id = file.read()
            fin.close()
            return (file, id)
    return None

def usage():
    print 'usage: %s [options]' % (sys.argv[0])
    print
    print 'options:'
    print '-l,--local            Run the local version of the test (default)'
    print '-r,--remote           Run the client/server version of the test'
    print '-n,--nocleanup        Do not erase the temporary root for the test'
    print '-i,--identity IDFILE  SSH identity file to use (remote test only)'
    print '-c,--client=ADDR      The client address (remote test only)'
    print '-s,--server=ADDR      The server address (remote test only)'
    print '-h,--help             Print this help message and exit'

def main():
    global ssh_id_file_keys
    try:
        opts, args = getopt.getopt(sys.argv[1:], 
                                   'lrni:c:s:', 
                                   ['local', 'remote', 'nocleanup', 'identity', 'client=', 'server='])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    client = os.environ.get('LABACKUP_TEST_CLIENT')
    server = os.environ.get('LABACKUP_TEST_SERVER')
    nocleanup = False
    mode = 'local'
    for o, a in opts:
        if o in ('-l', '--local'):
            mode = 'local'
        elif o in ('-r', '--remote'):
            mode = 'remote'
        elif o in ('-n', '--nocleanup'):
            nocleanup = True
        elif o in ('-i', '--identity'):
            fin = open(a)
            id = file.read()
            fin.close()
            ssh_id_file_keys = (a, id)
        elif o in ('-c', '--client'):
            client = a
        elif o in ('-s', '--server'):
            server = a
        elif o in ('-h', '--help'):
            usage()
            sys.exit()

    if not client: client = 'labackup-test-client'
    if not server: server = 'labackup-test-server'

    exitcode = 0
    tmproot = tempfile.mkdtemp()
    try:
        try:
            if mode == 'remote':
                if not ssh_id_file_keys:
                    ssh_id_file_keys = guess_ssh_id_file_keys()
                assert ssh_id_file_keys, "Can not determine the SSH keys"
                remoteTest(client, server)
            else:
                localTest(tmproot)
        except TestFailure, tf:
            print tf
            exitcode = 1
    finally:
        if nocleanup:
            print tmproot
        else:
            shutil.rmtree(tmproot)

    sys.exit(exitcode)

if __name__ == '__main__':
    main()

# vim: et ts=8 sw=4 sts=4
